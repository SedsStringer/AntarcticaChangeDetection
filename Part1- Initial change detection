// This code conducts change analysis for a site for which you have 2 land classifications (modern and old). It also conducts accuracy assessment.
// Please read through this script carefully, including all of the comments before implementing it.

// Define classified images you want to use

var mod = ee.Image(''); // Modern/contemporary image
var old = ee.Image(''); // Old/legacy image

// Combine classified images into 1 image

var combinedClass = old.addBands(mod);
var inBands_comb = ['b1', 'b1_1'];
var outBands_comb = ['2000', 'Modern'];
var combinedClass = combinedClass.select(inBands_comb,outBands_comb);

// Define landsat images you want to use and add NDWI, NDVI, and NDSI images 

var LS2000 = ee.Image(''); // legacy landsat image 
var LSModern = ee.Image(''); // Modern image

var addNDWI = function(img) {
  var NDWI = img.normalizedDifference(['b2', 'b4']).rename('ndwi');
  return img.addBands(NDWI);
}; // add ndwi band
var addNDVI = function(img) {
  var NDVI = img.normalizedDifference(['b4', 'b3']).rename('ndvi');
  return img.addBands(NDVI);
}; //add ndvi band
var addNDSI = function(img) {
  var NDSI = img.normalizedDifference(['b2', 'b5']).rename('ndsi');
  return img.addBands(NDSI);
}; // add ndsi band

var with_NDWI2000 = addNDWI(LS2000);
var with_NDVI2000 = addNDVI(with_NDWI2000);
var LS2000 = addNDSI(with_NDVI2000); // adds the 3 ND bands to the legacy Landsat image


var with_NDWI2000 = addNDWI(LSModern);
var with_NDVI2000 = addNDVI(with_NDWI2000);
var LSModern = addNDSI(with_NDVI2000); // adds the 3 ND bands to the modern Landsat image

// Combine landsat images into 1 image

var combinedLandsat = LS2000.addBands(LSModern);
var inBands_landsat = ['b1', 'b2', 'b3', 'b4', 'b5', 'b6','ndwi','ndvi','ndsi','b1_1', 'b2_1', 'b3_1', 'b4_1', 'b5_1', 'b6_1','ndwi_1','ndvi_1','ndsi_1'];
var outBands_landsat = ['blue2000', 'green2000', 'red2000', 'nir2000', 'swir1_2000', 'swir2_2000','ndwi2000','ndvi2000','ndsi2000', 'blueMod', 'greenMod', 'redMod', 'nirMod', 'swir1_Mod', 'swir2_Mod','ndwiMod','ndviMod','ndsiMod'];
var combinedLandsat = combinedLandsat.select(inBands_landsat, outBands_landsat)

// Create mask to hide: a) no data in either time; b) non-differentiated land in either time; c) Ice extent in the modern image.

var coastline = ee.FeatureCollection(''); // define coastline using a shapefile/feature collection
var combinedLandsat = combinedLandsat.clipToCollection(coastline) // clip the combined landsat image to the coastline of the site

var noData2000 = old.updateMask(old.eq(0));
var noData2000 = noData2000.reduceToVectors({
    reducer: ee.Reducer.countEvery(), 
    scale: 30,
    bestEffort: true, 
    maxPixels: 1e9
});
var nonDiff2000 = old.updateMask(old.eq(5));
var nonDiff2000 = nonDiff2000.reduceToVectors({
    reducer: ee.Reducer.countEvery(), 
    scale: 30,
    bestEffort: true, 
    maxPixels: 1e9
});
var noDataMod = mod.updateMask(mod.eq(0));
var noDataMod = noDataMod.reduceToVectors({
    reducer: ee.Reducer.countEvery(), 
    scale: 30,
    bestEffort: true, 
    maxPixels: 1e9
});
var nonDiffMod = mod.updateMask(mod.eq(5));
var nonDiffMod = nonDiffMod.reduceToVectors({
    reducer: ee.Reducer.countEvery(), 
    scale: 30,
    bestEffort: true, 
    maxPixels: 1e9
});

var iceMod = imgModern.updateMask(imgModern.eq(4));
var iceMod = iceMod.reduceToVectors({
    reducer: ee.Reducer.countEvery(), 
    scale: 30,
    bestEffort: true, 
    maxPixels: 1e9
});

var NAclasses = noData2000.merge(nonDiff2000).merge(noDataMod).merge(nonDiffMod).merge(iceMod);

var NAmask = combinedLandsat.clipToCollection(NAclasses);
var mask = ee.Image.constant(1).clipToCollection(NAclasses).mask().not();

var combinedLandsat = combinedLandsat.updateMask(mask);
var maskVector = mask.reduceToVectors({
    reducer: ee.Reducer.countEvery(), 
    scale: 30,
    bestEffort: true, 
    geometry: coastline.geometry(),
    maxPixels: 1e9
});

// Generate random points and extract data
var extent = ee.FeatureCollection(''); // this is the extent of the analysis and should be created as a geometry in Earth Engine.

var clipFunc = function(feature){
  return feature.intersection({
    right: extent,
    maxError: 1
  });
};

var AOI = coastline.map(clipFunc);

// ________THE FOLLOWING SECTION PERTAINS TO THE PRODUCTION OF RANDOM POINTS. BEFORE THE POINTS ARE PRODUCED, EVERYTHING AFTER LINE 135 SHOULD BE COMMENTED OUT. 
// ONCE THE POINTS ARE PRODUCED, THE SECTION UNDERNEATH LINE 135 CAN BE UN-COMMENTED, AND THIS SECTION SHOULD BE COMMENTED OUT ______________

// var points = ee.FeatureCollection.randomPoints(AOI, 10000, 1); // This is presently set to generate 10,000 random points
// var sampled_points = combinedClass.sampleRegions({
//   collection: points,
//   scale: 30,
//   geometries: true
// });

// Export.table.toDrive{
//   collection: sampled_points,
//   folder: 'CVA_Pilot',
//   description:'classificationCounts',
//   fileFormat: 'csv'
// });

// __________________________________________________________END OF POINT GENERATION SECTION_________________________________________________________________________________

// Once you have produced these points, analyse them in some sort of data management programme. I used Microsoft Excel, but other software are available. 
// Investiagte what class to class changes you have, and assign each of these a uniue numerical code


var changePoints = ee.FeatureCollection(''); // import the points produced in the previous section
print('changePoints', changePoints.size()); // confirm the number of points you have 

// Filter the change points to get the points for each class to class change 
// I used the .size() function to count the number of points in each category (i.e. w2v has 21 points).

var w2i = changePoints.filterMetadata('Change_cod', 'equals', 1); // n = 0
var w2b = changePoints.filterMetadata('Change_cod', 'equals', 2); // n = 21
var w2c = changePoints.filterMetadata('Change_cod', 'equals', 3); // n = 12
var w2f = changePoints.filterMetadata('Change_cod', 'equals', 4); // n = 10
var w2v = changePoints.filterMetadata('Change_cod', 'equals', 5); // n = 14

var t2i = changePoints.filterMetadata('Change_cod', 'equals', 6); // n = 0
var t2b = changePoints.filterMetadata('Change_cod', 'equals', 7); // n = 7
var t2c = changePoints.filterMetadata('Change_cod', 'equals', 8); // n = 13
var t2f = changePoints.filterMetadata('Change_cod', 'equals', 9); // n = 7
var t2v = changePoints.filterMetadata('Change_cod', 'equals', 10); // n = 7

var wi2b = changePoints.filterMetadata('Change_cod', 'equals', 11); // n = 22 
var wi2c = changePoints.filterMetadata('Change_cod', 'equals', 12); // n = 53
var wi2f = changePoints.filterMetadata('Change_cod', 'equals', 13); // n = 29
var wi2v = changePoints.filterMetadata('Change_cod', 'equals', 14); // n = 12

var i2w = changePoints.filterMetadata('Change_cod', 'equals', 15); // n = 1
var i2t = changePoints.filterMetadata('Change_cod', 'equals', 16); // n = 61
var i2b = changePoints.filterMetadata('Change_cod', 'equals', 17); // n = 45
var i2c = changePoints.filterMetadata('Change_cod', 'equals', 18); // n = 283
var i2f = changePoints.filterMetadata('Change_cod', 'equals', 19); // n = 164
var i2v = changePoints.filterMetadata('Change_cod', 'equals', 20); // n = 7 

var b2w = changePoints.filterMetadata('Change_cod', 'equals', 21); // n = 0
var b2t = changePoints.filterMetadata('Change_cod', 'equals', 22);  // n = 4
var b2wi = changePoints.filterMetadata('Change_cod', 'equals', 23); // n = 18
var b2i = changePoints.filterMetadata('Change_cod', 'equals', 24); // n = 0
var b2c = changePoints.filterMetadata('Change_cod', 'equals', 25); // n = 105
var b2f = changePoints.filterMetadata('Change_cod', 'equals', 26); // n = 28
var b2v = changePoints.filterMetadata('Change_cod', 'equals', 27); // n = 12

var c2w = changePoints.filterMetadata('Change_cod', 'equals', 28); // n = 0
var c2t = changePoints.filterMetadata('Change_cod', 'equals', 29);  // n = 48
var c2wi = changePoints.filterMetadata('Change_cod', 'equals', 30); // n = 99
var c2i = changePoints.filterMetadata('Change_cod', 'equals', 31); // n = 0
var c2b = changePoints.filterMetadata('Change_cod', 'equals', 32); // n = 391
var c2f = changePoints.filterMetadata('Change_cod', 'equals', 33); // n = 773
var c2v = changePoints.filterMetadata('Change_cod', 'equals', 34); // n = 72 

var f2w = changePoints.filterMetadata('Change_cod', 'equals', 35); // n = 1
var f2t = changePoints.filterMetadata('Change_cod', 'equals', 36); // n = 8
var f2wi = changePoints.filterMetadata('Change_cod', 'equals', 37); // n = 32
var f2i = changePoints.filterMetadata('Change_cod', 'equals', 38); // n = 0
var f2b = changePoints.filterMetadata('Change_cod', 'equals', 39); // n = 59
var f2c = changePoints.filterMetadata('Change_cod', 'equals', 40); // n = 1304
var f2v = changePoints.filterMetadata('Change_cod', 'equals', 41); // n = 22

var v2w = changePoints.filterMetadata('Change_cod', 'equals', 42); // n = 0
var v2t = changePoints.filterMetadata('Change_cod', 'equals', 43); // n = 2 
var v2wi = changePoints.filterMetadata('Change_cod', 'equals', 44); // n = 0
var v2i = changePoints.filterMetadata('Change_cod', 'equals', 45); // n = 0
var v2b = changePoints.filterMetadata('Change_cod', 'equals', 46); // n = 7
var v2c = changePoints.filterMetadata('Change_cod', 'equals', 47); // n = 165
var v2f = changePoints.filterMetadata('Change_cod', 'equals', 48); // n = 32

var NC = changePoints.filterMetadata('Change_cod', 'equals', 0); // No change class

var changePoints = NC.merge(wi2c).merge(i2f)
                  .merge(i2t).merge(c2t).merge(c2wi).merge(f2b).merge(c2b) .merge(c2f).merge(c2v).merge(b2c).merge(f2c).merge(i2c); // select only the points with > 1 % of all the points 
print(changePoints.size()); // check the number of remaining points 

// ___________Add CVA bands - see for further inforamtion: 
// Xu, R., Lin, H., LÃ¼, Y., Luo, Y., Ren, Y., Comber, A., 2018. A Modified Change Vector Approach for Quantifying Land Cover Change. Remote Sens. 10, 1578. https://doi.org/10.3390/rs10101578. __________

var bandName = ['band'];

var LS2000_blue = combinedLandsat.select(['blue2000'],bandName);
var LSMod_blue = combinedLandsat.select(['blueMod'],bandName);
var di_blue = LSMod_blue.subtract(LS2000_blue);
var di_bluePWR2 = di_blue.pow(2);
var LS2000_green = combinedLandsat.select(['green2000'],bandName);
var LSMod_green = combinedLandsat.select(['greenMod'],bandName);
var di_green = LSMod_green.subtract(LS2000_green);
var di_greenPWR2 = di_green.pow(2);
var LS2000_red = combinedLandsat.select(['red2000'],bandName);
var LSMod_red = combinedLandsat.select(['redMod'],bandName);
var di_red = LSMod_red.subtract(LS2000_red);
var di_redPWR2 = di_red.pow(2);
var LS2000_nir = combinedLandsat.select(['nir2000'],bandName);
var LSMod_nir = combinedLandsat.select(['nirMod'],bandName);
var di_nir = LSMod_nir.subtract(LS2000_nir);
var di_nirPWR2 = di_nir.pow(2);
var LS2000_swir1 = combinedLandsat.select(['swir1_2000'],bandName);
var LSMod_swir1 = combinedLandsat.select(['swir1_Mod'],bandName);
var di_swir1 = LSMod_swir1.subtract(LS2000_swir1);
var di_swir1PWR2 = di_swir1.pow(2);
var LS2000_swir2 = combinedLandsat.select(['swir2_2000'],bandName);
var LSMod_swir2 = combinedLandsat.select(['swir2_Mod'],bandName);
var di_swir2 = LSMod_swir2.subtract(LS2000_swir2);
var di_swir2PWR2 = di_swir2.pow(2);


// Sum di values 
var di_col = ee.ImageCollection([ee.Image(di_blue),ee.Image(di_green),ee.Image(di_red),ee.Image(di_nir),ee.Image(di_swir1),ee.Image(di_swir2)]);

var di_sum = di_col.sum();


// Sum di^2 values 
var diPWR_col = ee.ImageCollection([ee.Image(di_bluePWR2),ee.Image(di_greenPWR2),ee.Image(di_redPWR2),ee.Image(di_nirPWR2),ee.Image(di_swir1PWR2),ee.Image(di_swir2PWR2)]);

var diPWR_sum = diPWR_col.sum();

// FINAL ED VALUE

var ED = diPWR_sum.sqrt();
var inED = ['band'];
var outED = ['ED'];
var ED = ED.select(inED,outED);

// CALCULATE DA
var n = 12;

var nED = ED.multiply(n);

var SQRTnED = nED.sqrt();
var diDIVnED = di_sum.divide(SQRTnED);

var DA = diDIVnED.acos();
var inDA = ['band'];
var outDA = ['DA'];

var DA = DA.select(inDA,outDA);

// CALCULATE SAM

// Y * X

var mulBlue = LS2000_blue.multiply(LSMod_blue);
var mulGreen = LS2000_green.multiply(LSMod_green);
var mulRed = LS2000_red.multiply(LSMod_red);
var mulNIR = LS2000_nir.multiply(LSMod_nir);
var mulSWIR1 = LS2000_swir1.multiply(LSMod_swir1);
var mulSWIR2 = LS2000_swir2.multiply(LSMod_swir2);

var mulSumP1 = ee.ImageCollection([mulBlue,mulGreen,mulRed,mulNIR,mulSWIR1,mulSWIR2]);
var mulSumP2 = mulSumP1.sum();


// Bottom line eq 4

var LS2000_bluePWR2 = LS2000_blue.pow(2);
var LS2000_greenPWR2 = LS2000_green.pow(2);
var LS2000_redPWR2 = LS2000_red.pow(2);
var LS2000_nirPWR2 = LS2000_nir.pow(2);
var LS2000_swir1PWR2 = LS2000_swir1.pow(2);
var LS2000_swir2PWR2 = LS2000_swir2.pow(2);

var LSMod_bluePWR2 = LSMod_blue.pow(2);
var LSMod_greenPWR2 = LSMod_green.pow(2);
var LSMod_redPWR2 = LSMod_red.pow(2);
var LSMod_nirPWR2 = LSMod_nir.pow(2);
var LSMod_swir1PWR2 = LSMod_swir1.pow(2);
var LSMod_swir2PWR2 = LSMod_swir2.pow(2);

var eq4bottomP1 = ee.ImageCollection([LS2000_bluePWR2,LS2000_greenPWR2,LS2000_redPWR2,LS2000_nirPWR2,LS2000_swir1PWR2,LS2000_swir2PWR2, LSMod_bluePWR2,LSMod_greenPWR2,LSMod_redPWR2,LSMod_nirPWR2,LSMod_swir1PWR2,LSMod_swir2PWR2]);

var eq4bottomP2 = eq4bottomP1.sum();

var eq4div = mulSumP2.divide(eq4bottomP2);

// final SAM calculation 

var SAM = eq4div.acos();
var inSAM = ['band'];
var outSAM = ['SAM'];
var SAM = SAM.select(inSAM,outSAM);

// Add bands

var changeRaster = ee.Image(combinedLandsat.addBands([ED,DA,SAM]));
print(changeRaster);

// _________________Run the random forest classifier______________

// This includes script for quanitfying the accuracy of the classification


var bands = ['blue2000', 'green2000', 'red2000', 'nir2000', 'swir1_2000', 'swir2_2000','ndwi2000','ndvi2000','ndsi2000', 'blueMod', 'greenMod', 'redMod', 'nirMod', 'swir1_Mod', 'swir2_Mod','ndwiMod','ndviMod','ndsiMod','ED','DA','SAM'];
var changeRaster = changeRaster.select(bands).toFloat();

//RANDOM FOREST
print(changePoints.limit(10));

// Sample the input with a different random seed to get validation data.
var changePointsRC =  changePoints.randomColumn();

// Randomly split the collection into two sets, 30% and 70% of the total.
var validationSet = changePointsRC.filter('random < 0.3'); // Select 30 % of the data for validation
print('N features in 30% sample', validationSet.size()); 

var trainingSet = changePointsRC.filter('random >= 0.3'); // Select 70 % of the data for classification
print('N features in 70% sample', trainingSet.size());

var training = changeRaster.select(bands).sampleRegions({
  collection: trainingSet,
  properties: ['Change_cod'],
  geometries : true,
  scale: 30 // set scale
}); 

Export.table.toAsset({ // Export the training data to Google Earth Engine Asset
  collection: training,
  description: 'CVA_BPtrainingSet',
});

var classifier = ee.Classifier.smileRandomForest(500).train({ // number of trees = 500
  features: training,
  classProperty: 'Change_cod',
  inputProperties: bands
});

var classified = changeRaster.select(bands).classify(classifier);
var class_map = classified;

print(classified);

// Get a confusion matrix representing resubstitution accuracy.
var trainAccuracy = classifier.confusionMatrix();
print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());

var validation = changeRaster.sampleRegions({
  collection: validationSet,
  properties: ['Change_cod'],
  geometries : true,
  scale: 30 // set scale
  // Filter the result to get rid of any null pixels.
}).filter(ee.Filter.notNull(changeRaster.bandNames()));

// Classify the validation data.
var validated = validation.classify(classifier);

print(validated);

// Get a confusion matrix representing expected accuracy.
var testAccuracy = validated.errorMatrix('Change_cod', 'classification');
print('Validation error matrix: ', testAccuracy);
print('Validation overall accuracy: ', testAccuracy.accuracy());


Export.image.toDrive({ // Export the classified change raster
  image: classified,
  description: 'Change_ByersPeninsula',
  folder: 'CVA',
  scale: 30,
  region: BP_extent,
  maxPixels: 1e9});
